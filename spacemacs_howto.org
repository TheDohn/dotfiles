#+TITLE: How to do stuff in Spacemacs

* searching

** in a project

- install ag (the silver searcher)
- this is accessible via SPC-s-a-<family>, but likely will be default for SPC-/ now too
  - SPC-s-a-f is good for select files
- after using SPC-s-a-<> to search project or files you can type C-c C-e to make that editable
  (or use control-z for help, which tells you to use f4)

- I can't use control-n to edit that, but you can use SPC-s-e

** in a file

*** swoop

SPC-s-s
- nice that it consolidates all hits
- you can loose context though as a result

*** iedit

SPC-s-e
- hard bc you immediately get all hits in file, and you aren't sure where they are
- usually I just type S-J to start selecting lines below that so you aren't selecting the whole file

** select instances in an open file

*** evil make cursor

C-n

- will give multiple cursors on a object, one-by-one, which is nice for just editing limited instance on screen
- g-r-q to quit multiple cursors

*** dump-jump-go

typically need to access this function by name (M-x, dumb-jump-go)
- I needed to bind this to gd to make it easy to access

** within files or directories

*** helm-do-ag:
- SPC-s-a-f
- then hit CTR-SPC to select files OR whole directories to search

note that helm-do-ag is different than helm-ag:

*** helm-ag will do a raw search, and for many hits may nearly crash emacs
*** helm-do-ag is like ag at the CL, and will take flags, which is very useful
  for example: "face -c" will only print the number of times in that file, which is more digestable
- if you search for a very common like "facebook" or "python" helm-do-ag may not return anything
  (likely bc it has defaults or knows it will crash, or is searching too much stuff)

** for file or directory names:

*** find-name-dired:
- SPC-f-d
- have to select one directory (can't do CRT-SPC but I bet there is another option to do this somewhere)
- * is the wildcard here

** search and replace a regex
- just M-x for "replace-regex"
- this works well when it is not a variable overall that I am changing, but maybe a prefix on a bunch of variables

** misc symbol search
- while on a symbol you can hit '*' which will give a transient state that you can then hit things like 'e' to edit that variable
or '/' to search for it
** in a Python script lsp-rename will change the variable everywhere
** searching open buffers
useful to search/compare text in two different buffers,
     like in the case if the same env params are defined
- open `helm-multi-occur-from-isearch`
- select the buffers with SPC
- then search

* org mode
* ess
* Python
- treesitter - this gives syntax highlighting
- lsp gives context pop ups for functions etc.
** switching and assigning REPLs:

from: https://stackoverflow.com/questions/49886186/emacs-starting-a-new-inferior-python-shell-when-evaluating-buffer

1) Use the M-x rename-buffer command to set the existing inferior shell buffer name to something like =*Python-otherbuff*=
(note that in the above there are ='s in org mode so that should render as Python-otherbuff with *'s surrounding it)
- SO WHAT YOU TYPE is the stuff inside and including the *s!, not the =s
- you NEED to have these for it to work!
2) (setq-local python-shell-buffer-name "Python-otherbuff") in each buffer which should interact with the old inferior shell.
- just quotes here, no *s
- M-x eval-expression to get a prompt to run the snippet in the ()s above

NOTE: I am not clear if this will give you autocomplete if the original shell was a docker container yet
- actually I think is bc of what TAB is doing for the mode,
since TAB autocomplete will work in a raw shell outside of Emacs

* DAP mode
-NOTE for Python the Conda env must be activated for DAP mode to work!

** to start DAP
- `,ddd` to run DAP, or `,dde` to edit DAP first (I think the window config? unsure about this one

* LSP mode
- lsp-rename `,rr` to rename that variable/function throughout the project

* window/project management
** tab-bar-mode
- combine this with desktop-save to save the states
- this works pretty well but I don't like that you can't hide/show the tabs, so they take up space
** spacemacs layouts
- save/load layouts saves the buffers to open as well (just not a REPL)
- one way to start a new layout is SPC-p-l

* getting help

** describe buffer
- C-h b will give a list of commands in a buffer (like org or dired)

* How to use tramp:
  1. add info to file [[~/.ssh/config][~/.ssh/config:]]
        # 'ForwardX11 yes' forwards graphics to current machine as per https://ess.r-project.org/Manual/ess.html
        Host amazon
            HostName ec2-34-228-79-88.compute-1.amazonaws.com
            User ec2-user
            IdentityFile ~/.ssh/ec2_test_key_pair.pem
            ForwardX11 yes
  2. ssh into service using Tramp by using find file, /NOT/ helm
     - specifically, type SPC SPC, then search for 'find-file'
     - then enter '/ssh:<User>@<Host>:<path/to/file>'
     - if you leave just ':' as the path you will open Dired
  3. Things to do:
     + if you open a Python or R file, just hit the leader key ','
        and then follow prompts to open a REPL, which will run on that machine
     + type SPC SPC to search, and search/select 'shell'
       - that will open a shell on the remote machine
  4. search and run 'tramp-cleanup-all-connections' or a similar variant to close connection(s)

* Dired:
** use 'a' to access a dired folder, and kill the old one (so you don't open a ton of directories using ENT)
