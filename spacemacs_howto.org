#+TITLE: How to do stuff in Spacemacs

* searching

** in a project for text in a file

- install ag (the silver searcher)
- this is accessible via SPC-s-a-<family>, but likely will be default for SPC-/ now too
  - SPC-s-a-f is good for select files
- after using SPC-s-a-<> to search project or files you can type C-c C-e to make that editable
  (or use control-z for help, which tells you to use f4)

- I can't use control-n to edit that, but you can use SPC-s-e

note that ag doesn't search dot files by default.

from the CL there are two ways to do this:
when searching for eza in dotfiles:
$ ag -u eza
$ ag eza .*
there are some differences I didn't explore between the two

for emacs, this means project search won't work but the ag search might:
searching directory in spacemacs: SPC s a d
then "-u eza"


** in a file

*** swoop

SPC-s-s
- nice that it consolidates all hits
- you can loose context though as a result

*** iedit

SPC-s-e
- hard bc you immediately get all hits in file, and you aren't sure where they are
- usually I just type S-J to start selecting lines below that so you aren't selecting the whole file

** select instances in an open file

*** evil make cursor

C-n

- will give multiple cursors on a object, one-by-one, which is nice for just editing limited instance on screen
- g-r-q to quit multiple cursors

*** dump-jump-go

typically need to access this function by name (M-x, dumb-jump-go)
- I needed to bind this to gd to make it easy to access

** within files or directories

*** helm-do-ag:
- SPC-s-a-f
- then hit CTR-SPC to select files OR whole directories to search

note that helm-do-ag is different than helm-ag:

*** helm-ag will do a raw search, and for many hits may nearly crash emacs
*** helm-do-ag is like ag at the CL, and will take flags, which is very useful
  for example: "face -c" will only print the number of times in that file, which is more digestable
- if you search for a very common like "facebook" or "python" helm-do-ag may not return anything
  (likely bc it has defaults or knows it will crash, or is searching too much stuff)

** for a file or directory names:

*** find-name-dired:
- SPC-f-d
- have to select one directory (can't do CRT-SPC but I bet there is another option to do this somewhere)
- * is the wildcard here
- wildcards are not assumed: to search for any sub text "ob" in "foobar" you need to add * as in: "*ob*"

** search and replace a regex
- just M-x for "replace-regex"
- this works well when it is not a variable overall that I am changing, but maybe a prefix on a bunch of variables

** misc symbol search
- while on a symbol you can hit '*' which will give a transient state that you can then hit things like 'e' to edit that variable
or '/' to search for it
** in a Python script lsp-rename will change the variable everywhere
- I don't know if this works across, say, yaml & python files

** searching open buffers
useful to search/compare text in two different buffers,
     like in the case if the same env params are defined
- open `helm-multi-occur-from-isearch`
- select the buffers with SPC
- then search

* org mode
* ess
* Python
- treesitter - this gives syntax highlighting
- lsp gives context pop ups for functions etc.
** switching and assigning REPLs:

from: https://stackoverflow.com/questions/49886186/emacs-starting-a-new-inferior-python-shell-when-evaluating-buffer

1) Use the M-x rename-buffer command to set the existing inferior shell buffer name to something like =*Python-otherbuff*=
(note that in the above there are ='s in org mode so that should render as Python-otherbuff with *'s surrounding it)
- SO WHAT YOU TYPE is the stuff inside and including the *s!, not the =s
- you NEED to have these for it to work!
2) (setq-local python-shell-buffer-name "Python-otherbuff") in each buffer which should interact with the old inferior shell.
- just quotes here, no *s
- M-x eval-expression to get a prompt to run the snippet in the ()s above

NOTE: I am not clear if this will give you autocomplete if the original shell was a docker container yet
- actually I think is bc of what TAB is doing for the mode,
since TAB autocomplete will work in a raw shell outside of Emacs

** indent guides

*** toggle-indent-guide which is basically this, I think:
https://github.com/DarthFennec/highlight-indent-guides

*** highlight-indentation-mode

** lsp and flycheck
- if lsp is not enabled (literally search for 'lsp' and activate it)
then flycheck can't find certain docs, and will raise errors.
so in short, activate LSP for flycheck to work right

* debugging

** DAP mode
-NOTE for Python the Conda env must be activated for DAP mode to work!

*** to start DAP
- `,ddd` to run DAP, then I typically 'Run project from project directory'
- or `,dde` to edit DAP first (I think the window config? unsure about this one


** alternatives to DAP mode, since I have had problems with it:


I can't get either of these to run from the project root, otherwise they work

*** just run eval pdb

*** eval realgud:pdb

** when sourcing a script with a breakpoint() in if __name__ == '__main__':

just replacing the if with something like the following works well:
if __name__ == '__main__' or __name__ == 'src.train':

* LSP mode
- lsp-rename `,rr` to rename that variable/function throughout the project

* window/project management
** tab-bar-mode
- combine this with desktop-save to save the states
- this works pretty well but I don't like that you can't hide/show the tabs, so they take up space
** spacemacs layouts
- save/load layouts saves the buffers to open as well (just not a REPL)
- one way to start a new layout is SPC-p-l

* getting help

** describe buffer
- C-h b will give a list of commands in a buffer (like org or dired)

* How to use tramp:

note that you might need to open the EC2 first at the CL to verify the fingerprint, then this will work in Emacs

  1. add info to file [[~/.ssh/config][~/.ssh/config:]]
        # 'ForwardX11 yes' forwards graphics to current machine as per https://ess.r-project.org/Manual/ess.html
        Host amazon
            HostName ec2-34-228-79-88.compute-1.amazonaws.com
            User ec2-user
            IdentityFile ~/.ssh/ec2_test_key_pair.pem
            ForwardX11 yes
  2. ssh into service using Tramp by using find file, /NOT/ helm
     - specifically, type SPC SPC, then search for 'find-file'
     - then enter '/ssh:<User>@<Host>:<path/to/file>'
     - if you leave just ':' as the path you will open Dired
  3. Things to do:
     + if you open a Python or R file, just hit the leader key ','
        and then follow prompts to open a REPL, which will run on that machine
     + type SPC SPC to search, and search/select 'shell'
       - that will open a shell on the remote machine
  4. search and run 'tramp-cleanup-all-connections' or a similar variant to close connection(s)

*update*:
https://medium.com/@Drowzy/tramp-in-spacemacs-ef82b9e703ee
I may be able to do this even differently and more easily
1. SPC f f to find file
2. delete everything down to '/'
3. then type ssh:
4) it should autocomplete the User and Host after that,
and depending if you want to go to a file, then keep auto completing

Note that I think you can only have one of these running at once,
so once you are connected, it won't work if you try to do it again

Note that in some cases I need to be on the VPN for the connection to work.

** docker in a running EC2:

to go a bit further, if you want to connect to a running docker container inside an EC2 use a similar process to the above:
1) find find: SPC f f
2) then /ssh:<Host>|docker:<container>:/ TAB to complete
Ex: /ssh:db_med|docker:ecstatic_bardeen:/:

if the above fails (if there is a typo) you can access docker shell first in a buffer, then just SPC f f to enter Dired

** tramp-unload-tramp

I had to run tramp-unload-tramp to get magit working after using tramp, once

* Docker on local machine:


this seems to work for engaging with a running docker container:
https://happihacking.com/blog/posts/2023/dev-containers-emacs/


1. SPC f f to find file
2. delete everything down to '/'
3. then type docker:<container name>:

and it should auto complete after that

I don't know how to get a terminal or REPL in the Docker container...
- this works for simple Python images, but not ones that contain conda
- I think I need to update the "tramp-remote-path" so it knows about conda:
https://www.gnu.org/software/emacs/manual/html_node/tramp/Remote-programs.html#Remote-programs
i.e. (add-to-list 'tramp-remote-path 'tramp-own-remote-path)

also this
https://www.reddit.com/r/emacs/comments/kymvrz/emacs_lsp_with_docker_conda/

running 'conda init' then turning of the container, and turning it back on may have worked

installing one or both of these:
pip install python-lsp-server
pip install pyright

may have enabled LSP to at least work in the Python REPL, if not the Python files themselves

I find that when I spin down a container, tangling buffers within Emacs will stall/crash
- use "tramp-cleanup-all-buffers" to fix this
- "tramp-cleanup-all-connections" cleans up the autocomplete that you get in find-file with /docker:<container id>


when I edit a file:
- inside the container it is reflecting OUTSIDE very quickly
- outside the container, I need to run 'revert-buffer' to see the effect inside the container.
   - I don't know why that is not more instantaneous
   - or you can just run ":e", which seems like some sort of reload

** docker compose after a rebuild

I had a hell-of-a-time making sure docker compose was using the most recent build, i.e.
$ docker build . --no-cashe
$ docker compose up -d --force-recreate
was still using some prior docker image/build

I tried removing the volume
https://stackoverflow.com/questions/67223144/docker-compose-up-not-using-latest-build-even-after-a-rebuild
$ docker compose down -v

but that didn't work either

I ended up using docker prune -a to just basically restart

** !WARNING! - recent files in docker tramp screw things up

docker files that hang out in the recent files can cause problems. b/c emacs keeps trying to open them. furthermore, much of my config didn't load, which mad it hard to navigate.
to fix this I needed to M-x, recentf-edit-list, then click in the region to the left of each docker file (of the form /docker:<container ID>:, then click "OK" at the bottom

or I could just go to /Users/donbunk/.emacs.d/.cache/recentf and manually delete them

generally it seems best to run something like "tramp-cleanup-all-connections" *before* I spin down the container


* Dired:
** use 'a' to access a dired folder, and kill the old one (so you don't open a ton of directories using ENT)
* refreshing packages

I was getting errors about gpg and keys at one point:
Failed to verify signature archive-contents.sig:
No public key for 645357D2883A0966 created at 2024-06-14T05:05:05-0400 using EDDSA
Command output:
gpg: Signature made Fri Jun 14 05:05:05 2024 EDT
gpg:                using EDDSA key 0327BE68D64D9A1A66859F15645357D2883A0966
gpg: Can't check signature: No public key

This prevented some packages from downloading. I don't know why this came up out of no where


This worked:
gpg --homedir ~/.emacs.d/elpa/gnupg --keyserver hkp://keyserver.ubuntu.com  --recv-keys 645357D2883A0966

from here:
https://github.com/syl20bnr/spacemacs/issues/13054#issuecomment-2131307249
